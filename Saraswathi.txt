DAY 1
CLASS 1 

* everything in Java is Object (but there is a but) 
* Object has structure and it does a specific work

Real time 

Taluk Office

* Marriage certificate, Income certificate, death certificate, Caste certificate

Receptionist
Clerk
Broker

building - Taluk office 

Reception: 
chairs
table
reception table 
people 
water
newspaper
pen
Reception phone
Rceptionist
Receptionst personal phone
documents
camera
system


Marriage certificate room: 
people
chairs
table
camera 
system 
newspapre
document
pen
water
Personal phone
common phone
marriage certificates

Income certificate room: 
people
chairs
table
camera 
system 
newspapre
document
pen
water
Personal phone
common phone
income certificates

Access Modifer
Personal things 
common things


each room is to do a specfic designated work. 
	each room is called Method.
	Method in java is to do a specific work
	Whatever work you do, it should be a method or inside a method
	Whatever happens inside a method is invisible to others
	You can take reception room water bottle to any methods room but you can not take methods room things to other places (there is a but)

Structure 
People - 50
chair - 100
table - 10

people, chair, table - data type 

People - 100 - count 100 - data type and variable 
One person in that people name is Sathya - name 

Taluk office building 
	It is to do a set of work - marriage, income & other certificates
	Marriage certificate method, Income certificate method, etc. (each of them are methods)
	Class in java consist of many methods
Taluk office - Class


People adminstration - package
Chennai Taluk office - Class 
	below are sub classes of Chennai Taluk office 
Velachery Taluk office - Class 
	Velachery east Taluk office - Class (He is sub class of Velachery class)
Tambaram Taluk office - Class
Guindy Taluk office - Class 

* Sub classes of Chennai are Velachery, Guindy and Tambaram
* Velachery east is sub class of Velachery 
* Velachery east is same package of Tambaram but not a sub class of Tambaram

Based on this only we created access modifier 


Police department adminstration - package
Chennai police station 
Tambaram police station 

Hospital administration - package 
chennai hospital (Govt and private) 
tambaram hospital 

Law management - package
Chennai court 
Tambaram court 

Chennai administration - project 
	People adminstration - package
	Police department adminstration - package
	Hospital administration - package 
	Law management - package
	

* People adminstration have a set of rules
* Police department have set of rules
* Hopspital adminstration 
	private hospital rules set
	Govt hospital rules set 

These rules set in Java are called interface

Taluk office 
	Receptionist - Chennai Taluk office receptionist
	Reception Phone - Chennai taluk office phone 
	Reception table - Chennai taluk office reception table 
similarly for other classes too. 

They are always belongs to their specific class  - static 
	* Whenever we call a static member, we call them with their class name 

Velachery Govt hospital - class 
	* They are scheduling a health checkup camp 
		* In this case, they take doctors, nurses, medicines, operation room, cleaning room and other things from Velachery Govt hospital only

Health checkup camp - Object name 
Object we create for class only
When creating object, they take/create copy of all the things in that class

Tambaram police station wants health check up 
* In Tambaram police station's campus, we create object for Tambaram Govt hospital health check up camp 

Coming back to Taluk office 
clerk in taluk office, we take as constructor

* We just tell what you want 
* you tell what you want with document
* you tell what you want with document1, document2
* you tell what you want with documents, amount
* you tell what you want with amount

***************************************************************************************

DAY 2 
CLASS 2

Project
	package1
		InterfaceA
		ClassA (variables/methods)
			ClassAA 
			ClassAB
		ClassB
		ClassC
	package2
		ClassA
		ClassB
	package3
		ClassX
		ClassA
		

* Class - It does a set of work. It consist of variables and methods. Each work would be done by methods. 

* Methods - It does speicific job. It always written inside a class

* Variable - it can have type(Data type) and posses a number or name;
			variables can have different access - access Modifier
			
* Access Modifier - difines where we can use a variable/method/class

* Interface - It contains rules most of the time. Sometimes it does some work too(means method).
			Interface is always followed by class/classes. 
			When class follows interface, class should do the rule written in the interface

* package - contains class/classes/interface/interfaces/file/files/folder/folders

* Project - consist of package/packages/file/files/folder/folders/source(src)folder

* static - static means belongs to the class. If govt hospital is class, then hospital receptionist is a static member of that class. We can not seperate them
			variables and methods can be static
			within a class - static can be used anywhere directly (in a static method or in non-static method)
			Outside calss - static can be used but alone with class name. (in a static method or in non-static method)

* Object - E.g: Medical camp; We create Object only for classes; Whenever we create object we copy whatever the class contains(except static)
			means, only non-static is copied
			Through object we can not call static things.

* Constructor - Object creation happens with the help of constructor
				constructor is available in different kind
				1. without any money/permission
				2. only with money
				3. only with permission
				4. with both money and permission

###############################################################################################
				
Class - important thing, through which we perform some task. Class may contains methods and variables

Method1 - A work
Method2 - B work
Method3 - C work ( A work + some other work)

redundant - repeatable 
resure

Variables - shape and count/name
shape - datatype 


Datatype: Its a classification of a data, which tells the compiler or interpretor about how the programmer intends to use the data.

1) Primitive
	a) boolean - yes or no
	b) Textual 
		char - a, b, c, A, B
		byte - 
			byte x = 10;
	c) numeric 
		int 
		short
		double
		long
		float

2) Non Primitive
	d) String 
	e) array

each datatype has a default value

* default value of String is null
* default value of int is 0
* boolean - false

int a = 10;  
int a;
String a = "10";
double a = 10d;
char sathya = 'A';
boolean b = true;

int a; - declare
a = 10; - define/initiate

int a = 10;
int - data type( primitive --> numeric)
a - variable/variableName;
10 - value posses by the variable/ value pointed by the variable

Variables - Its a memory location that can hold values of a specific datatype.

Types of variables 
1. Local variable - 
	* declared within a method/constructor, for, if    -- block ({...})
	* scope of local variable is only within the block in which the variable is declared
	* intialization of local variable is madatory
	* local variables can not be static
	{
	int a = 10;
	char c;
	String sathya = "10";
	}
	
2. Instance variable/class variable/non-static  variable
	* Declared within a class but outside of a block ({...})
	* Non- static variables
	* To access instance variables, we need to create object
	
	int a = 10;
	String sathya = "10";
	
	
3. Static variable
	* Declared within a class but outside fo a method
	* static keyword is used with variables and methods
	* To access this variable, dont need to create an object
	* within a class - static can be used anywhere directly (in a static method or in non-static method)
	* Outside calss - static can be used but alone with class name. (in a static method or in non-static method)
	
	static int a = 10;
	static String sathya = "10";
	
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
	
Access Modifier
	* It defines where and who can use a method/variable/class
	1) default
	2) private
	3) protected
	4) public 
	
	int a = 10; - default (no need to mention "default" word
	private int a = 10;
	protected int a = 10;
	public int a = 10;
	
	
	packageA
		classA ( public int a = 10)
			ClassAA (same package and sub class of A)
		classB (same package but non sub class of A)
	packageX
		classX (diff package non sub class)
		classXA (diff package but sub class of A)
		
	

                                     | default |  private  | protected  | public 
									 |         |           |            | 
classA ( int a = 10)                 | yes     | yes       | yes        | yes
									 |         |           |            |
same package but sub class           | yes     | no        | yes        | yes 
									 |         |           |            |
same package but non sub class       | yes     | no        | yes        | yes
									 |         |           |            |
different package but sub class      | no      | no        | yes        | yes
									 |         |           |            |
different package but non sub class  | no      | no        | no         | yes

*******************************************************************************************************

DAY 3

JVM, JRE, JDK

our codes - english - .java
compile - .class - byte code (machine recognizable language)


JVM - Java Virtual Machine 
* This can not be seen
* it starts the execution
* It first checks for main method
* It creates the code flow, in java the flow is called "Thread" 
* JVM provides run time environment in which Java byte codes can be executed
* loads code| verifies code| execute code| provides run time environment

JRE - Java Runtime Environment
* Physically exist
* Contains JVM and set of libraries
* JVM uses these libraries to execute the codes

JDK - Java Developement kit
* It contains JVM, set of libraries and dev tools (JRE + dev tools)
* Used to develop and execute the codes
* Dev tools + debugger + compiler + java doc

--------------------------------------

What is eclipse (IDE)

Its an editor to edit and view your project or project files
While writing itself, it will notify us about complilation errors

Its a user interface to view your project or file in an easy way

tab
drag and drop

* Perspective 
	Few of the perspectives in Eclipse
	* Java
	* Debug
	* Git
	
* window

Maven

GroupID
Artifact ID 
verision

Facebook jar
Meta 
facebook
version 1.1.100

Insta jar
Meta
Insta
version 10.1.10

* Dependency Management tool
* we dont need to download any jar files(dependency).
* Group ID, Artifact ID and Version
* If we create a project with mavan as a dependency management tool, we get a proper project structure.
* Important file in maven project is pom.xml. In this file, we add dependency details 
* Dependencies will be stored in .m2 folder

************************************************************************************************
DAY 4

Git 

We can store our project code in a proper structure. 
It will help us to reduce time and many people can work on a project at a same time 

1. Create a project in local (our system)
2. Create git account
3. Create a repo in your git account (remote)
4. We view our local project in system through Eclipse
5. We need to connect our Eclipse with Git repo

upload project in Git

Steps to upload project in Git hub

1) Create a remote repository
2) In your system open git bash from your project location
3) enter below commands
	git init
	git add .
	git commit -m "any message you can type here"
	git remote add origin SSHURL
	git push origin master
	
	
	To view status:  git status 
	to clear lines: clear


************************************************************************************************************

DAY 5

Java keywords
new, class, access modifiers, static, this, super, throw, throws, try, catch, final, finally, data type, if, for, while, break, continue,
switch

* Java is case sensitive language

Naming coversion in java
* Should not use above things
* homepage - homePage (Camel case)

If you are creating package, package name
* should start with small letter followed by camel case

if you are creating class
* should start with Captial letter followed by camel case

thisIsPackageName 
ThisIsClassName
ThisIsInterfaceName

thisIsMethodName
thisIsObjectName or ThisIsObjectName
thisIsVariableName



Syntax

class 

accessModifer class className {

}

e.g: public class GovtHospital {

}


method 

accessModifer static/Non-static returnType methodName() {

}

static/Non-static accessModifer returnType methodName() {

}

public void thisIsNonStaticMethod() {

}

public static void thisIsStaticMethod() {

}

Methods in Java

1) main method 
2) static method
3) non static method

With in a class
* calling static method from a static method - directly call
* calling static method from a non static method - directly call 

* calling non-static from a static method - Object creation
* calling non-static from a non static - Object creation/ directly call


Object creation - to call non-static methods

Within class only we have both static and non-static member. 

1) We create object only for class.
2) In order to access non static members of a class, we create object and access the methods and variables

Objection definition - Whenever we create an Object for a class, whatever non-static members(methods and variables) present in that class 
				will be copied and stored in heap memory. We call non-static memebers through Object creation only.
				
What is heap memory? 

Memory Management

Heap memory
Stack memory
SCP (String Constant Pool - A part of heap memory)

ClassA obj1 = new ClassA();

ClassA - Class Name
Obj1 - Object Name variable
new = key word to create obj
ClassA() - Constructor or Object creation or instance creation

* Whenever we create an object for a class, whatever non-static variables and methods present in that class will be copied to heap memory
* Object varibale or instance variable, is stored in stack memory 
* We can create multiple object for a single class


	stack memory			Heap me
	obj1.				a = 10; method1();
	obj2				a = 10; method1();
	obj3				a = 10; method1(); 
	obj1ClassB			non static members
	
	
int a = 10;
* a = 10 - it will be stored in stack memory

String Literals
	String Sathya = "1000"; 
	
Object creation for String
	ClassA obj1 = new ClassA();
	String Sathya = new String("1000"); 

Sathya - Stack
1000 - SCP of Heap memory

String str = "Sathya";
String str1 = "Sathya";
String str2 = "Ranjith";

stack 		SCP
str			"Sathya" - 
str1 		
str2 		Ranjith

str1 = str1 + str2;
str1 = SathyaRanjith

str - Sathya - SathyaRanjith


stack 		SCP
str			"Sathya" - 
str1 		SathyaRanjith
str2 		Ranjith

str1 = str1+"abc"

			
String a = "new";
a = a+"10";
a = new10;

Immutable concept 
* It happens with String literals



Data types as variables 
Variables in Java

Based on where we use our data types or variable names, we categories variables in 3 types 

1. Local variable
2. Class level or instance variable 
3. static variable



****************************************************************************************

Daya type as a parameter and return type
Variable as a parameter

Methods in Java
1) method without return type
2) method with return type
3) static method
4) non static method
5) parameterized method
6) Non parameterized method



*****************************************************************************

DAY 6 

Interface in Java
	* Creating interface within interface
	* creating class within class

Abstract class in details

******************************************************************************

DAY 7

OOPs concept

Object Oriented Program means everything in the program is considered as Object

Java is OOP language but not 100% OOPs language. Primitive date type (int, float, etc.), they are not object. 

Root class of Java is Object. Means, if you create any class, Object class is always extended. But it is implicitly used.

public class ClassA {

} 

this is nothing but 

public class ClassA extends Object {

}

OOPs Concepts in Java

1. Encapsulation
2. Abstraction
3. Inheritance
4. Polymorphism

Try the below things in each of the concepts follows
VARIABLES
ACCESS MODIFIERS
METHODS - parameters or/and return type
STATIC
Obejct creation


Object creation with inheritance

ClassName objName = new ClassName(); 

ClassName - reference Class
objName - Object variable Name
new - keyword
ClassName() - Constructor, Object

By using inheritance, we can create 4? types of objects (Only 3 is allowed)

Class1 - parentClass
class2 - childClass

parentClass obj1 = new parentClass();
childClass obj2 = new childClass();
parentClass obj3 = new childClass();
childClass obj4 = new parentClass(); - not possible

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Polymorphism

One thing available in different format.

* depends on 
	1) inheritance
	2) object creation
	3) method signature (method name and parameters(with or without))


Two polymorphism - Overloading, overriding 

OverLoading 
* It happens within a class 
* Method name should be same and parameters should vary

Overriding
* It happens between two classes (Parent and child class) - Inheritance concept
* Method name should be same and parameter also should be same

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
DAY 8 

Constructor

Topics we covered before
	* Variables
	* Methods
	* Static
	* return type
	* Object creation
	* Inheritance
	* Overload
	* Override
	
Once we see the basic of Constructor, we are going to implement all the above topics on Constructor

Object creation

ClassA obj = new ClassA();

ClassA obj1 = new ClassA();
ClassA obj2 = new ClassA();

ClassA obj = new ClassA();
ClassA obj = new ClassA(20);
ClassA obj = new ClassA("Text");

public void method() { }

obj.method();
obj.method(10);


public ClassA() {

}

***************************************************************************************

DAY 9

Keywords in Java

access modifiers
data types
class, interface, package, abstract
return types, return
extends, implements
new
if, for, while, do


final
static
super
this

static
 * always belongs to the class
 * object creation not needed
 * static members within a class - direct calling
 * static members outside a class - className.staticMemberName
 * we can overload static method
 * we can not override static method
 * In interface, we can create a methods with body but that method should be either static or default
 
 
Final
 * we have to initiate while declaring
 * Once value its initalized, we cant change the value at any point
 * we can use final with variables, methods and class

************************************************************************************************

DAY 10

Super and this keywords

super() and this() 

*********************************************************************

DAY 11

Errors and Exceptions 

try catch finally


************************************************************************

DAY 12

Throw Throws Throwable


********************************************************************

DAY 13

if 

**********************************************************************

DAY 14

for

break and continue

debug

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

forEach 

multiple returns







































				










































































